Car Tracker

	Server
		API
		
			Car	
				Endpoint to create / register cars. Does so based on the VIN 
					of the car.
			
			Trip			
				End point to create
			
			Reading
		
		Web Site
	
	Android Application
		-Connects to ODBII reader over bluetooth
			-Need to know which bluetooth device to connect to
			-Save the bluetooth device for easy re-connecting
			-GUI for selecting the bluetooth device to use
			-Detect when bluetooth device is available
			-Detect when bluetooth device is no longer available
			
			-Java ODBII Library
				https://github.com/pires/obd-java-api
			
		-Collects telemetrics data paired with time + location
			-Background service to collect the data
			-Service is started when it detects the bluetooth device is paired
			-Service is ended when it detects the bluetooth device is unpaired
			
			Android Service Documentation
				http://developer.android.com/guide/components/services.html
				-Should use Foreground Service
				
				-Bluetooth Broadcast Receiver
					http://developer.android.com/reference/android/bluetooth/BluetoothDevice.html
			
		-Sends data back to the server
			-Sends the collected telemetrics data back to the server at given intervals
			-Saves a copy of the data locally
				-if phone doesn't currently have an internet connection it is not lost
		
		-Settings
			-Bluetooth device
			-Upload frequency
			-Upload server
			-Data poll frequency
			-Location enabled
			-Enable saving data locally
			-Cache time?
			
		Main Activity
			-Contain the Settings for the Service
		
		UI
			-The settings UI
				-A list view
			-The bluetooth device chooser
			
			
	Data
		-End / Resulting Data Points
			-Location / Travel History
			-Speed
				-Instantaneous
				-Average
			-Trip Time
				-Trip Start
				-Trip End
			-Trip Distance
			-Fuel Economy
				-Starting Fuel Level
				-Ending Fuel Level
				-MPG
			
	-PoC
		-Commands:
			Air Intake Temp
			Ambient Air Temp
			Engine Coolant Temp
			
			Engine RPM
			Speed
			MAF
			Throttle Position
			Fuel Level
			Fuel Type
			VIN
			Oil Temp
			
			
			

			
Notes:
	Android Application Service Structure
	
	-Take OBD data
		-Read in the data from the OBD reader
	-Push data to temporary storage
		-temporary storage / cache before we persist the data up to the service
		-assigns a unique id for each reading
		-keep track of the upload status for each reading
		-if successful removes it from the queue
		-if not successful makes note, and tries to upload again
			-after x retries don't upload
	-Push data to server
		-Reads the cache for any records need uploading
			-possibly have a minimum number of records
				-won't upload unless there are 10 readigns ready.
				-so we aren't always using the network connection
		-if records meet upload criteria,
			-we create the bulk upload record for them.
			-update thier status in the cache to uploading
			-wait for server response
			-on server response
				-check for success or errors
				-remove all of the successful ones from cache
				-determine reason for error					
					-network / server error occured? slate them for re-upload
					-server said invalid upload,
						-remove and don't try
						-not sure if/how this would happen though.
						
			
	-Need a class that will manage the Data collection
		-expsoes a readData method that returns an OBD reading
	
	-Need a class to store / persist the data
		-Keep the cache + server logic together or seperate?
		-Together.. one base storage class.
			-can put in different behaviours
			-aka cacheing persister, server persister, combination, etc
					
		
			
			
			
			
			
			
	Android Application Process / Structure
	
		-Background Service
			-Triggered by the pairing / connecting of a bluetooth device
			-Every time it detects the ODBII reader is connected to the phone
			
			-Every x seconds collects ODBII data
			
			-Periodically uploads data to the server.
			
				-Know what car it is
					-Does it? It has the VIN, can most likely create trip and upload
						-telemtric data based on VIN..
						
				-Create Trip
					-When the persister services starts,
						we can create a new trip
						
					-When the persister service ends,
						we end the trip
						-update the server and tell it the trip is over.
				
				-Upload OBD + GPS data for the trip
			
			
			
			
				
				